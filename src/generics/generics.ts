/* eslint-disable prefer-const */
/* eslint-disable @typescript-eslint/no-unused-vars */

// Общие типы в TypeScript позволяют писать объекты,
// функции и классы, которые работают с несколькими типами данных,
// вместо того, чтобы быть ограниченным одним типом данных.Общий тип
// определяется с использованием угловых кронштейнов <T> и может использоваться в качестве заполнителя
// для конкретного типа данных.Фактический тип данных указывается, когда
// используется функция или класс.
// Например, ниже приводится общая функция, которая принимает одну
// аргумент любого типа данных и возвращает тот же тип данных:

function identity<T>(arg: T): T {
  return arg;
}

let output = identity<string>("Hello Worrld!");

class GenericNumber<T> {
  zero!: T;
  add!: (x: T, y: T) => T;
}

// В этом примере функция идентификации принимает один аргумент любых данных
// Тип и возвращает тот же тип данных.Фактический тип данных указывается, когда
// Функция вызывается с помощью <string> перед аргументом привет.
// дженеки также могут использоваться с классами, интерфейсами и типами объектов, позволяя
// они также работают с несколькими типами данных.

let myGenericNumber = new GenericNumber<number>();
myGenericNumber.zero = 0;
myGenericNumber.add = (x, y) => {
  return x + y;
};
