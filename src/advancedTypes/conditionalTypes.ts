/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */
// Условные типы в TypeScript - это способ выбрать тип на основе условия.
// Они позволяют вам писать тип, который динамически выбирает тип на основе
// типов его входов.Условные типы объявляются с использованием комбинации
// ключевого слова вывода и типа, который проверяет условие и выбирает тип,
// основанный на результате теста.
// Например, ниже приведен условный тип, который принимает два типа и
//  возвращает тип первого аргумента, если он расширяет второй аргумент,
// и в противном случае тип второго аргумента:

type Extends<T, U> = T extends U ? T : U;

type AE = Extends<string, any>;
type BE = Extends<any, string>;

// В этом примере условный тип Extends принимает два типа T и U и возвращает
//  тип первого аргумента T, если он расширяет второй аргумент U, и тип
//  второго аргумента U в противном случае.T Extends U Синтаксис используется
//  для проверки того, расширяет ли T U и?T: u Синтаксис используется для выбора
// типа T, если тест проходит и тип u иначе.
